!function(e,t,i){"use strict";var n="xtypejsCustomTypesExtension",o="0.1.1";var r,f={name:n,version:/\s*{{[^}]*}}\s*/g.test(o)?"unspecified":o,type:"xtypejs",init:function(p){var e={}.constructor||e,y=e.create,u=e.keys,d=this;function n(e,t){if("object"!=typeof e){if("string"==typeof e){var i,n,o,r,f=d.getTypeDefinitions();if(-1<u(f).indexOf(e))throw'Custom type name "'+e+'" conflicts with existing type name';if(!/^([0-9a-z_]+)$/.test(e))throw"Type name must only contain lowercase alphanumeric characters and underscore";if("object"==typeof t&&null!==t&&"definition"in t?(i=t.definition,o=t.schemeAliases,r=t.matchMode):i=t,"string"==typeof i&&(i=n=function(e,t,i){var n=e.trim().split(/[ ]*[, ][ ]*/g);if(n.length<2)throw"Type definition string for custom type '"+i+"' must contain two or more type components";t="all"===t?"all":"any";var o,r,f,s,a=[],c=[],u=[];if(n.forEach(function(e){var t=d.getTypeDefinitions()[e];if(void 0===t)throw"Unknown type '"+e+"' in type definition string for custom type '"+i+"'";"number"==typeof t?a.push(t):"function"==typeof t?c.push(t):"object"==typeof t&&u.push(t)}),0<a.length&&(o="all"===t?p.ANY:0,a.forEach(function(e){o="all"===t?o&e:o|e})),0<c.length&&(r="all"===t?function(e){for(var t=0,i=c.length;t<i;t++)if(!(e instanceof c[t]))return!1;return!0}:function(e){for(var t=0,i=c.length;t<i;t++)if(e instanceof c[t])return!0;return!1}),0<u.length&&(f="all"===t?function(e){for(var t=0,i=u.length;t<i;t++)if(!u[t].validator(e))return!1;return!0}:function(e){for(var t=0,i=u.length;t<i;t++)if(u[t].validator(e))return!0;return!1}),void 0===o&&!r&&!f)throw"Faild to determine valid composite checker for custom type '"+i+"' with type definition string '"+e+"'";if(void 0!==o&&!r&&!f)return o;if(!r||o||f)s=!f||o||r?function(e){return"all"===t?(void 0===o||p.is(e,o))&&(!r||r(e))&&(!f||f(e)):void 0!==o&&p.is(e,o)||!!r&&r(e)||!!f&&f(e)}:f;else{if(1===c.length)return c[0];s=r}var l=y(null);return l.validator=s,l.identity=t+" : "+n.sort().join(" "),l}(i,r,e)),"number"==typeof i){if((i&p.ANY)!==i)throw"Custom extended type composite '"+e+"' can only be derived using built-in extended type Ids."}else if("object"==typeof i&&null!==i){if("function"!=typeof i.validator)throw"Custom type '"+e+"' definition is missing the validator function.";n!==i&&((n=y(null)).validator=i.validator,i=n)}else if("function"!=typeof i)throw"No valid type definition provided for requested custom type '"+e+"'";var s,a,c=function(e){var t,i,n,o,r=d.getTypeDefinitions(),f=u(r),s=f.length;for(o=0;o<s;o++)if(i=f[o],t=r[i],n="object"==typeof t?t.identity?t.identity:t.validator:t,e===n)return i;return null}("object"==typeof n?n.identity:"object"==typeof i?i.validator:i);if(c)throw"Custom type '"+e+"' conflicts with other type '"+c+"' with identical definition";if(o){if("object"!=typeof o)throw'Custom type "'+e+'" scheme aliases is not an object';s=e,u(a=o).forEach(function(t){var e=d.getNameSchemes(),i=a[t];if(t in e&&"string"==typeof i){var n=e[t];u(n).forEach(function(e){if(i===n[e])throw'Type name alias "'+i+'" for name scheme "'+t+'" for custom type "'+s+'" conflicts with existing name in the specified name scheme'}),n[s]=i}})}d.defineType(e,i)}}else registerTypes(e)}var t=p.ext||y(null);(p.ext=t).registerType=function(e,t){var i;"object"==typeof e?"object"==typeof(i=e)&&u(i).forEach(function(e){n(e,i[e])}):n(e,t),d.refresh()}}};if("function"==typeof define&&define.amd)define([],function(){return f});else if("object"==typeof module&&module.exports)module.exports=f;else{if(t&&t.ext&&"function"==typeof t.ext.registerExtension)return t.ext.registerExtension(f);f.noConflict=(r=e[n],function(){return e[n]=r,delete f.noConflict,f}),e[n]=f}}(this,"undefined"!=typeof xtype?xtype:void 0);
//# sourceMappingURL=xtypejs-extension-custom-types.js.map